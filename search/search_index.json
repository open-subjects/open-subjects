{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Subjects \u00b6 Open subjects is a website offering exercises to learn and train various tech skills. Most of the subjects are oriented towards development, yet some additional goals regarding system administration, DevOps methodologies or infrastructure management might be involved someday! This aims to provide a context to develop your languages knowledge and getting some personal projects ideas. Quick Start \u00b6 Pick a subject Request your first validation ! Validation process \u00b6 Below are the steps to trigger a validation process for your delivery. Examples are given using the Github CLI . Create a public repository to push your code gh repo create Fork this repository gh repo fork Add a link to your repository in the validations list ## Validations - @tbobm/open-subjects-hello-world Create a Pull Request gh repo pr create -t \"validation: Hello world - tbobm\" A standardized validation request Pull Request template is available to facilitates reviewing the different deliveries. Contributing \u00b6 Generate the documentation \u00b6 This website's documentation is generated using mkdocs with a couple of extensions. The complete configuration can be found in the mkdocs.yml file. A [requirements.txt][doc-deps] is available. git clone https://github.com/open-subjects/open-subjects pip install -r subjects/requirements.txt The documentation can be generated using the following command: $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /home/bob/ghub/open-subjects/site INFO - Documentation built in 0.33 seconds If you'd like view the static website built locally: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.33 seconds [I 210316 00:10:50 server:335] Serving on http://127.0.0.1:8000","title":"Overview"},{"location":"#open-subjects","text":"Open subjects is a website offering exercises to learn and train various tech skills. Most of the subjects are oriented towards development, yet some additional goals regarding system administration, DevOps methodologies or infrastructure management might be involved someday! This aims to provide a context to develop your languages knowledge and getting some personal projects ideas.","title":"Open Subjects"},{"location":"#quick-start","text":"Pick a subject Request your first validation !","title":"Quick Start"},{"location":"#validation-process","text":"Below are the steps to trigger a validation process for your delivery. Examples are given using the Github CLI . Create a public repository to push your code gh repo create Fork this repository gh repo fork Add a link to your repository in the validations list ## Validations - @tbobm/open-subjects-hello-world Create a Pull Request gh repo pr create -t \"validation: Hello world - tbobm\" A standardized validation request Pull Request template is available to facilitates reviewing the different deliveries.","title":"Validation process"},{"location":"#contributing","text":"","title":"Contributing"},{"location":"#generate-the-documentation","text":"This website's documentation is generated using mkdocs with a couple of extensions. The complete configuration can be found in the mkdocs.yml file. A [requirements.txt][doc-deps] is available. git clone https://github.com/open-subjects/open-subjects pip install -r subjects/requirements.txt The documentation can be generated using the following command: $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /home/bob/ghub/open-subjects/site INFO - Documentation built in 0.33 seconds If you'd like view the static website built locally: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.33 seconds [I 210316 00:10:50 server:335] Serving on http://127.0.0.1:8000","title":"Generate the documentation"},{"location":"good-practices/","text":"Good Practices \u00b6 This page is a bunch of resources regarding good practices, either directly technical or more collaboration-oriented. Commits \u00b6 While using a VCS, try to aim for explicit, clear and meaningful commits. Refrain from doing session-based commits (i.e.: every N hours) and make your commits match with what you are currently doing, like a feature, a bugfix or even editing the CI. https://www.conventionalcommits.org/en/v1.0.0/ Issues \u00b6 Most git-supporting websites (Github, Gitlab) implement the concept of Issues. Use them to track your work, your roadmap or bugfixes. Aim to explicit as much as possible what the Issue is. https://about.gitlab.com/blog/2016/03/03/start-with-an-issue/ Documentation \u00b6 How to write documentation \u00b6 The most common syntax used to write documentation as text is the Markdown . https://www.markdownguide.org/getting-started/ Tools \u00b6 Multiple tools can create static websites based on Markdown. https://readthedocs.org/ https://www.mkdocs.org/ Host documentation \u00b6 You can easily host your static websites using 3 rd party services like Github Pages to make it viewable. https://docs.github.com/en/pages/getting-started-with-github-pages Coding \u00b6 Architecture \u00b6 https://blog.octo.com/en/hexagonal-architecture-three-principles-and-an-implementation-example/ Linting \u00b6 https://www.freecodecamp.org/news/what-is-linting-and-how-can-it-save-you-time/","title":"Good Practices"},{"location":"good-practices/#good-practices","text":"This page is a bunch of resources regarding good practices, either directly technical or more collaboration-oriented.","title":"Good Practices"},{"location":"good-practices/#commits","text":"While using a VCS, try to aim for explicit, clear and meaningful commits. Refrain from doing session-based commits (i.e.: every N hours) and make your commits match with what you are currently doing, like a feature, a bugfix or even editing the CI. https://www.conventionalcommits.org/en/v1.0.0/","title":"Commits"},{"location":"good-practices/#issues","text":"Most git-supporting websites (Github, Gitlab) implement the concept of Issues. Use them to track your work, your roadmap or bugfixes. Aim to explicit as much as possible what the Issue is. https://about.gitlab.com/blog/2016/03/03/start-with-an-issue/","title":"Issues"},{"location":"good-practices/#documentation","text":"","title":"Documentation"},{"location":"good-practices/#how-to-write-documentation","text":"The most common syntax used to write documentation as text is the Markdown . https://www.markdownguide.org/getting-started/","title":"How to write documentation"},{"location":"good-practices/#tools","text":"Multiple tools can create static websites based on Markdown. https://readthedocs.org/ https://www.mkdocs.org/","title":"Tools"},{"location":"good-practices/#host-documentation","text":"You can easily host your static websites using 3 rd party services like Github Pages to make it viewable. https://docs.github.com/en/pages/getting-started-with-github-pages","title":"Host documentation"},{"location":"good-practices/#coding","text":"","title":"Coding"},{"location":"good-practices/#architecture","text":"https://blog.octo.com/en/hexagonal-architecture-three-principles-and-an-implementation-example/","title":"Architecture"},{"location":"good-practices/#linting","text":"https://www.freecodecamp.org/news/what-is-linting-and-how-can-it-save-you-time/","title":"Linting"},{"location":"rules/","text":"Common Validation rules \u00b6 Validation request requirements \u00b6 In order to ease reviewing validation requests, ensure you match the following requirements before applying for a review. Why the requirements? The goal is to ease reviewing and offer your the occasion to conform to the Open Source standards such as documentation . The repository you submit must conform to the following. Requirements \u00b6 Proper documentation must be easily accessible (i.e.: README.md , mkdocs or anything that is viewable and maintanable). Validation requests program should be able to execute the example(s) program should accept input given in the subject description excepted if adapting the format is relevant program may output information in other formats than specified in the subject Linting Repository must conform to at least one community linter ( pylint , tslint , go fmt ). You must include information regarding the linting convention you use. You may tweak configuration in certain parts (line length up to 110 chars ), but try to be as close as possible to the community guidelines for your language ! Packaging At least one method of packaging must be made available. You should use your language packaging method ( setup.py , npm ) and may use Docker to explore the concept of containers ! Creating OCI enables you to distribute your application easily. Documentation Describe the program usage Describe installation process (generate executable or install system-wide) You may provide additional examples Listing additional features is highly encouraged !","title":"Common Rules"},{"location":"rules/#common-validation-rules","text":"","title":"Common Validation rules"},{"location":"rules/#validation-request-requirements","text":"In order to ease reviewing validation requests, ensure you match the following requirements before applying for a review. Why the requirements? The goal is to ease reviewing and offer your the occasion to conform to the Open Source standards such as documentation . The repository you submit must conform to the following.","title":"Validation request requirements"},{"location":"rules/#requirements","text":"Proper documentation must be easily accessible (i.e.: README.md , mkdocs or anything that is viewable and maintanable). Validation requests program should be able to execute the example(s) program should accept input given in the subject description excepted if adapting the format is relevant program may output information in other formats than specified in the subject Linting Repository must conform to at least one community linter ( pylint , tslint , go fmt ). You must include information regarding the linting convention you use. You may tweak configuration in certain parts (line length up to 110 chars ), but try to be as close as possible to the community guidelines for your language ! Packaging At least one method of packaging must be made available. You should use your language packaging method ( setup.py , npm ) and may use Docker to explore the concept of containers ! Creating OCI enables you to distribute your application easily. Documentation Describe the program usage Describe installation process (generate executable or install system-wide) You may provide additional examples Listing additional features is highly encouraged !","title":"Requirements"},{"location":"giscord/","text":"giscord \u00b6 Goal : Create Bot to report github repository activity in a Discord channel. See Discord's Developer Portal Features \u00b6 Interactions must be done through bot-commands . You are free to chose a common prefix for your commands, as long as it is consistant. The prefix '$' will be used in the example. Every command must involve an output. The bot can be deployed and hosted any way you like, as long as you package it properly. Administration \u00b6 Register \u00b6 Register a new repository to watch. @tbobm: $register tbobm/open-subjects @giscord: adding https://github.com/tbobm/open-subjects to the watch list! Unregister \u00b6 Remove the repository from the watch list. @tbobm: $unregister tbobm/open-subjects @giscord: removing https://github.com/tbobm/open-subjects from the watch list Notify \u00b6 Notify modifications of the repositories in the watch list when: Issues or pull requests are created or closed New release is created (or new tag) Example output below: @giscord: Pull request opened by tbobm #6 chore(ci): Add github action CI \u2022 Add Github action CI \u2022 Fix lint errors Reviewers @tbobm <https://github.com/tbobm/open-subjects/pulls/6> | Mar 22nd This can be extended to: New commits in branch Interactions in commits / PRs Packaging \u00b6 Packaging must meet the following criterias: Bot shall be installable as a package / executable package.json poetry through cargo Documentation Installation process Configuration process Authentification, if required Packaging giscord as an OCI Image is highly encouraged. Distribution through registries (ghcr.io) or package management (npm, pip) is encouraged. Additional targets \u00b6 None Validations \u00b6 None","title":"giscord"},{"location":"giscord/#giscord","text":"Goal : Create Bot to report github repository activity in a Discord channel. See Discord's Developer Portal","title":"giscord"},{"location":"giscord/#features","text":"Interactions must be done through bot-commands . You are free to chose a common prefix for your commands, as long as it is consistant. The prefix '$' will be used in the example. Every command must involve an output. The bot can be deployed and hosted any way you like, as long as you package it properly.","title":"Features"},{"location":"giscord/#administration","text":"","title":"Administration"},{"location":"giscord/#register","text":"Register a new repository to watch. @tbobm: $register tbobm/open-subjects @giscord: adding https://github.com/tbobm/open-subjects to the watch list!","title":"Register"},{"location":"giscord/#unregister","text":"Remove the repository from the watch list. @tbobm: $unregister tbobm/open-subjects @giscord: removing https://github.com/tbobm/open-subjects from the watch list","title":"Unregister"},{"location":"giscord/#notify","text":"Notify modifications of the repositories in the watch list when: Issues or pull requests are created or closed New release is created (or new tag) Example output below: @giscord: Pull request opened by tbobm #6 chore(ci): Add github action CI \u2022 Add Github action CI \u2022 Fix lint errors Reviewers @tbobm <https://github.com/tbobm/open-subjects/pulls/6> | Mar 22nd This can be extended to: New commits in branch Interactions in commits / PRs","title":"Notify"},{"location":"giscord/#packaging","text":"Packaging must meet the following criterias: Bot shall be installable as a package / executable package.json poetry through cargo Documentation Installation process Configuration process Authentification, if required Packaging giscord as an OCI Image is highly encouraged. Distribution through registries (ghcr.io) or package management (npm, pip) is encouraged.","title":"Packaging"},{"location":"giscord/#additional-targets","text":"None","title":"Additional targets"},{"location":"giscord/#validations","text":"None","title":"Validations"},{"location":"hello-world/","text":"hello-world \u00b6 Complexity Executable Goal Low greet Create a CLI Program that outputs a greeting. This subject is purely aimed to trying out the validation workflow. Feature \u00b6 Greet \u00b6 The program greet may have an argument to specify who to greet. $ greet Bob Hello Bob. If no person to greet is specified, greet the World. $ greet Hello World. If multiple words are specified, greet as if it was a fully qualified name. $ greet Lord Bob, leader of the Koala Squad Hello Lord Bob, leader of the Koala Squad. Additional targets \u00b6 Packaging Making a packaging mechanism available and your program easily installable is considered a \"soft requirement\" as it will be required for other exercises. Lint In order to ease the reviewing phase, please make sure your repository follows the common linting guidelines for your language. Documentation Make sure your repository is properly documented and that your code can be easily understood. Validations \u00b6 None","title":"hello-world"},{"location":"hello-world/#hello-world","text":"Complexity Executable Goal Low greet Create a CLI Program that outputs a greeting. This subject is purely aimed to trying out the validation workflow.","title":"hello-world"},{"location":"hello-world/#feature","text":"","title":"Feature"},{"location":"hello-world/#greet","text":"The program greet may have an argument to specify who to greet. $ greet Bob Hello Bob. If no person to greet is specified, greet the World. $ greet Hello World. If multiple words are specified, greet as if it was a fully qualified name. $ greet Lord Bob, leader of the Koala Squad Hello Lord Bob, leader of the Koala Squad.","title":"Greet"},{"location":"hello-world/#additional-targets","text":"Packaging Making a packaging mechanism available and your program easily installable is considered a \"soft requirement\" as it will be required for other exercises. Lint In order to ease the reviewing phase, please make sure your repository follows the common linting guidelines for your language. Documentation Make sure your repository is properly documented and that your code can be easily understood.","title":"Additional targets"},{"location":"hello-world/#validations","text":"None","title":"Validations"},{"location":"icali/","text":"Icali \u00b6 Goal : Develop a CLI program that creates icals from csv files. $ icali my-events.csv created 3 events: - event A (2021-02-28) - event B (2021-03-07) - event C (2021-02-27 Input \u00b6 The program must implement the --date and the --title flag. The program must take one (1) or more files as csv inputs to process. The dates must match the ISO 8601 Date: Specify the column name from which the program will load the event date (\"date\") Title: Specify the column name from which the program will load the event title (\"title\") More flag may be implemented, such as ( --description for the description, --end for end date field if implemented, --duration ...). Output \u00b6 One (1) or multiple .ics files ready to be imported in your favourite calendar. The output file must match the RFC5545 Data \u00b6 exemple file: title,date,description event A, 2021-02-28, do some stuff event B, 2021-03-07, do some other stuff event C, 2021-02-27, nice event exemple file 2: e,ref,description data A, 2022-02-28, do some stuff event C, 2021-02-27, nice event Additional targets \u00b6 Documentation Unit tests Specify date and time in events Implement duration processing: end date can be computed from column Submissions \u00b6 @nicolasdecorbez/icali","title":"icali"},{"location":"icali/#icali","text":"Goal : Develop a CLI program that creates icals from csv files. $ icali my-events.csv created 3 events: - event A (2021-02-28) - event B (2021-03-07) - event C (2021-02-27","title":"Icali"},{"location":"icali/#input","text":"The program must implement the --date and the --title flag. The program must take one (1) or more files as csv inputs to process. The dates must match the ISO 8601 Date: Specify the column name from which the program will load the event date (\"date\") Title: Specify the column name from which the program will load the event title (\"title\") More flag may be implemented, such as ( --description for the description, --end for end date field if implemented, --duration ...).","title":"Input"},{"location":"icali/#output","text":"One (1) or multiple .ics files ready to be imported in your favourite calendar. The output file must match the RFC5545","title":"Output"},{"location":"icali/#data","text":"exemple file: title,date,description event A, 2021-02-28, do some stuff event B, 2021-03-07, do some other stuff event C, 2021-02-27, nice event exemple file 2: e,ref,description data A, 2022-02-28, do some stuff event C, 2021-02-27, nice event","title":"Data"},{"location":"icali/#additional-targets","text":"Documentation Unit tests Specify date and time in events Implement duration processing: end date can be computed from column","title":"Additional targets"},{"location":"icali/#submissions","text":"@nicolasdecorbez/icali","title":"Submissions"}]}